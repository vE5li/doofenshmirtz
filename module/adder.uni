component HalfAdder(in input0, in input1, out sum, out carry) {
    sum := input0 ^ input1
    carry := input0 & input1
}

component FullAdder(in input0, in input1, in carry_in, out sum, out carry_out) {
    sum := input0 ^ input1 ^ carry_in
    carry := (input0 & input1) | ((input0 ^ input1) & carry_in)
}

component Adder(in input0[#register], in input1[#register], out sum[#register], out carry_out) {
    Wire carry[#bit_range(1)]
    HalfAdder(input0[0], input1[0], sum[0], carry[0])
    carry_out := carry[bit_width - 1]
}

component AdderComponent<count0, count1>(in clock, in selector0[#selector(#count0)], in selector1[#selector(#count1)], in source0[#bit_width:0][#count0:0], in source1[#bit_width:0][#count1:0], out destination[#register][0:4]) {
    Wire carry_out
    BusRegister<#count0>(clock, selector0, source0, destination[0])
    BusRegister<#count1>(clock, selector1, source1, destination[1])
    Adder(destination[0], destination[1], destination[2], carry_out)
    destination[3] := #bit_width[carry_out]
}
