#function {

    indent {

        valid_functions [ string float integer character length add subtract multiply divide modulo logarithm power square_root negate absolute ceiling floor round sine cosine tangent not and or xor shift_left shift_right empty flip uppercase lowercase read_file ]

        resolved [ [ #single directive ] [ #single checking ] [ #single position ]

            @ ensure that the directive exists and is not already being resolved
            #if             [ #data #not_present ] [ #build:directives ] [ #scope:directive ]
            #print_line     [ #root:#color:red ] [ #data "\ninvalid directive " ] [ #scope:directive ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #scope:directive ] [ #data " is not a valid directive" ]
            #end

            @ make sure that the directive is not defined by itself
            #if             [ #data #contains ] [ #scope:checking ] [ #scope:directive ]
            #print_line     [ #root:#color:red ] [ #data "\nlooped directive " ] [ #scope:directive ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #data "directives may not be defined by itself" ]
            #end

            @ get the directives entry and check if its already resolved
            #index          [ #build:directives ] [ #scope:directive ]
            #modify         [ #data #scope:entry ] [ #last ]
            #if             [ #data #map ] [ #scope:entry:value ]

            @ resolve the entry, overwrite its previous value and return it
            #append         [ #scope:checking ] [ #scope:directive ]
            #pass           [ #scope:entry ] [ #last ]
            #modify         [ #data #scope:entry ] [ #last ]
            #overwrite      [ #build:directives ] [ #scope:directive ] [ #scope:entry ]
            #modify         [ #data #build:directives ] [ #last ]

            @ debug message
            #if             [ #data #true ] [ #root:debug ]
            #serialize      [ #scope:entry:value ]
            #call           [ #function:#print:debug ] [ #data "directive " ] [ #root:#color:magenta ] [ #scope:directive ] [ #root:#color:none ] [ #data " set to " ] [ #root:#color:magenta ] [ #last ] [ #root:#color:none ]
            #end

            @ return newly resolved value
            #return         [ #scope:entry:value ]
            #end

            @ already resolved, return current value
            #return         [ #scope:entry:value ]
        ]

        directive [ [ #single self ] [ #single checking ]
            #call           [ #function:indent:resolved ] [ #scope:self:directive ] [ #scope:checking ] [ #scope:self:#position:directive ]
            #return         [ #last ]
        ]

        define_block [ [ #single self ] [ #single ]
            #return         [ #scope:self ]
        ]

        condition [ [ #single self ] [ #single checking ]

            @ pass the condition value and ensure its a boolean
            #pass           [ #scope:self:condition ] [ #scope:checking ]
            #modify         [ #data #scope:condition ] [ #last ]

            @ make sure that the condition is a boolean
            #if             [ #data #not_boolean ] [ #scope:condition ]
            #type           [ #scope:condition ]
            #print_line     [ #root:#color:red ] [ #data "\nunexpected " ] [ #last ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:condition ]
            #print_line
            #error          [ #data "condition may only be a boolean" ]
            #end

            @ if its true, pass the left value and return it
            #if             [ #data #true ] [ #scope:condition ]
            #pass           [ #scope:self:true ] [ #scope:checking ]
            #return         [ #last ]

            @ if its false, pass the right value and return it
            #else
            #pass           [ #scope:self:false ] [ #scope:checking ]
            #return         [ #last ]
            #end
        ]

        calculate_total [ [ #single source ]

            @ if source is a number, return it right away. otherwise ensure its a list
            #if             [ #data #number ] [ #scope:source:1 ]
            #return         [ #scope:source:1 ]
            #else           [ #data #not_list ] [ #scope:source:1 ]
            #type           [ #scope:source:1 ]
            #print_line     [ #root:#color:red ] [ #data "\nunexpected " ] [ #last ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:source:2 ]
            #print_line
            #error          [ #data "only numbers and characters may be part of an equasion" ]
            #end

            @ get the final left and right values
            #call           [ #function:indent:calculate_total ] [ #scope:source:1 ]
            #modify         [ #data #scope:left ] [ #last ]
            #call           [ #function:indent:calculate_total ] [ #scope:source:3 ]
            #modify         [ #data #scope:right ] [ #last ]

            @ invoke a math function set by the operator
            #list           [ #scope:left ] [ #scope:right ]
            #modify         [ #data #scope:parameters ] [ #last ]
            #keyword        [ #scope:source:2 ]
            #invoke         [ #last ] [ #scope:parameters ]
            #return         [ #last ]
        ]

        calculate_condition [ [ #single source ]

            @ if source is not a list, return it right away
            #if             [ #data #not_list ] [ #scope:source:1 ]
            #return         [ #scope:source:1 ]
            #end

            @ get the final left and right values
            #call           [ #function:indent:calculate_condition ] [ #scope:source:1 ]
            #modify         [ #data #scope:left ] [ #last ]
            #call           [ #function:indent:calculate_condition ] [ #scope:source:3 ]
            #modify         [ #data #scope:right ] [ #last ]

            @ check if its a logical operator
            #if             [ #data #contains ] [ #scope:source:2 ] [ #data logical_ ]
            #split          [ #scope:source:2 ] [ #data '_' ] [ #data !true ]
            #keyword        [ #last:2 ]
            #modify         [ #data #scope:instruction ] [ #last ]

            @ ensure both values are booleans
            #if             [ #data #not_boolean ] [ #scope:left ]
            #call           [ #function:indent:boolean_error ] [ #scope:left ] [ #scope:source:1:2 ]
            #end
            #if             [ #data #not_boolean ] [ #scope:right ]
            #call           [ #function:indent:boolean_error ] [ #scope:right ] [ #scope:source:3:2 ]
            #end

            @ invoke a math function set by the operator
            #list           [ #scope:left ] [ #scope:right ]
            #invoke         [ #scope:instruction ] [ #last ]
            #return         [ #last ]

            @ check the relation between the left and right values
            #else
            #keyword        [ #scope:source:2 ]
            #boolean        [ #last ] [ #scope:left ] [ #scope:right ]
            #return         [ #last ]
            #end
        ]

        pull [ [ #single source ] [ #single operators ]

            @ iterate all items
            #modify         [ #data #scope:index ] [ #data 2 ]
            #while          [ #data #smaller ] [ #scope:index ] [ #scope:source ]

            @ if the source has a length of 3, pull is done
            #length         [ #scope:source ]
            #if             [ #data #equals ] [ #last ] [ #data 3 ]
            #return         [ #scope:source ]
            #end

            @ check if the current item is one of the provided operators
            #index          [ #scope:source ] [ #scope:index ]
            #if             [ #data #contains ] [ #scope:operators ] [ #last ]

            @ get the value to the left of the operator and safe its index for inserting the new list
            #subtract       [ #scope:index ] [ #data 1 ]
            #modify         [ #data #scope:replace ] [ #last ]
            #index          [ #scope:source ] [ #last ]
            #modify         [ #data #scope:left ] [ #last ]

            @ get the value to the right of the operator
            #add            [ #scope:index ] [ #data 1 ]
            #index          [ #scope:source ] [ #last ]
            #modify         [ #data #scope:right ] [ #last ]

            @ insert the new list into source and remove the two following items
            #index          [ #scope:source ] [ #scope:index ]
            #list           [ #scope:left ] [ #last ] [ #scope:right ]
            #overwrite      [ #scope:source ] [ #scope:replace ] [ #last ]
            #remove         [ #last ] [ #scope:index ]
            #remove         [ #last ] [ #scope:index ]
            #modify         [ #data #scope:source ] [ #last ]

            @ if the operator is not found, check the next item
            #else
            #add            [ #scope:index ] [ #data 1 ]
            #modify         [ #data #scope:index ] [ #last ]
            #end
            #end
            #return         [ #scope:source ]
        ]

        combine_equasion [ [ #single pieces ] [ #single checking ]

            @ iterate the pieces
            #modify         [ #data #scope:combined ] [ #data [ ] ]
            #iterate        [ #scope:pieces ]
            #modify         [ #data #scope:iterator ] [ #last ]

            @ pass the part and add the value and position to the combined list
            #pass           [ #scope:iterator:instance:part ] [ #scope:checking ]
            #list           [ #last ] [ #scope:iterator:instance:position:part ]
            #append         [ #scope:combined ] [ #last ]
            #modify         [ #data #scope:combined ] [ #last ]

            @ if there is an operator following, add it to the combined list aswell
            #if             [ #data #present ] [ #scope:iterator:instance ] [ #data seperator ]
            #append         [ #scope:combined ] [ #scope:iterator:instance:seperator:operator ]
            #modify         [ #data #scope:combined ] [ #last ]

            @ return combined list
            #end
            #end
            #return         [ #scope:combined ]
        ]

        boolean_error [ [ #single instance ] [ #single position ]
            #type           [ #scope:instance ]
            #print_line     [ #root:#color:red ] [ #data "\nunexpected " ] [ #last ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #data "logical operators may only operate on booleans" ]
        ]

        equasion [ [ #single self ] [ #single checking ]

            @ put all values and operators into a single list
            #call           [ #function:indent:combine_equasion ] [ #scope:self:pieces ] [ #scope:checking ]

            @ put the operators and values into individual lists so they reolve in the correct order
            #call           [ #function:indent:pull ] [ #last ] [ #data [ multiply divide remainder ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ add subtract ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ shift_left shift_right ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ and ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ xor ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ or ] ]

            @ resolve the equasion
            #call           [ #function:indent:calculate_total ] [ #last ]
            #return         [ #last ]
        ]

        logical_equasion [ [ #single self ] [ #single checking ]

            @ put all values and operators into a single list
            #call           [ #function:indent:combine_equasion ] [ #scope:self:pieces ] [ #scope:checking ]

            @ put the operators and values into individual lists so they reolve in the correct order
            #call           [ #function:indent:pull ] [ #last ] [ #data [ bigger smaller not_smaller not_bigger ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ equals not_equals ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ logical_and ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ logical_xor ] ]
            #call           [ #function:indent:pull ] [ #last ] [ #data [ logical_or ] ]

            @ resolve the equasion
            #call           [ #function:indent:calculate_condition ] [ #last ]
            #return         [ #last ]
        ]

        concatinate [ [ #single self ] [ #single checking ]
            #modify         [ #data #scope:string ] [ #data "" ]
            #iterate        [ #scope:self:concatinate ]
            #pass           [ #last:instance:part ] [ #scope:checking ]
            #string         [ #scope:string ] [ #last ]
            #modify         [ #data #scope:string ] [ #last ]
            #end
            #return         [ #scope:string ]
        ]

        collect [ [ #single parameters ]
            #modify         [ #data #scope:new ] [ #data [ ] ]
            #iterate        [ #scope:parameters ]
            #append         [ #scope:new ] [ #last:instance:part ]
            #modify         [ #data #scope:new ] [ #last ]
            #end
            #return         [ #scope:new ]
        ]

        function [ [ #single identifier ] [ #single parameters ] [ #single position ]

            @ make sure the invoked function is valid
            #if             [ #data #not_contains ] [ #function:indent:valid_functions ] [ #scope:identifier ]
            #print_line     [ #root:#color:red ] [ #data "\ninvalid function " ] [ #scope:identifier ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #scope:identifier ] [ #data " is not a valid compiler function" ]
            #end

            @ invoke the specified compiler function
            #keyword        [ #scope:identifier ]
            #invoke         [ #last ] [ #scope:parameters ]
            #return         [ #last ]
        ]

        check_invertable [ [ #single value ]

            @ if value is a boolean, integer or character return true
            #if             [ #data #boolean ] [ #scope:value ]
            #return         [ #data !true ]
            #else           [ #data #integer ] [ #scope:value ]
            #return         [ #data !true ]
            #else           [ #data #character ] [ #scope:value ]
            #return         [ #data !true ]

            @ otherwise return the type of value
            #else
            #type           [ #scope:value ]
            #return         [ #last ]
            #end
        ]

        value [ [ #single self ] [ #single checking ]

            @ integer
            #if             [ #data #present ] [ #scope:self ] [ #data integer ]
            #return         [ #scope:self:integer ]

            @ string
            #else           [ #data #present ] [ #scope:self ] [ #data string ]
            #return         [ #scope:self:string ]

            @ float
            #else           [ #data #present ] [ #scope:self ] [ #data float ]
            #return         [ #scope:self:float ]

            @ character
            #else           [ #data #present ] [ #scope:self ] [ #data character ]
            #return         [ #scope:self:character ]

            @ negative number
            #else           [ #data #present ] [ #scope:self ] [ #data negative ]
            #pass           [ #scope:self:negative ] [ #scope:checking ]

            @ make sure resolved value is a number
            #if             [ #data #not_number ] [ #last ]
            #type           [ #last ]
            #print_line     [ #root:#color:red ] [ #data "\nunexpected " ] [ #last ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:negative ]
            #print_line
            #error          [ #data "only numbers may be negated" ]
            #end

            @ negate the resolved value and return it
            #negate         [ #last ]
            #return         [ #last ]

            @ inverted number or boolean
            #else           [ #data #present ] [ #scope:self ] [ #data inverted ]
            #pass           [ #scope:self:inverted ] [ #scope:checking ]

            @ make sure resolved value is invertable
            #call           [ #function:indent:check_invertable ] [ #last ]
            #if             [ #data #not_true ] [ #last ]
            #print_line     [ #root:#color:red ] [ #data "\nunexpected " ] [ #last ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:inverted ]
            #print_line
            #error          [ #data "only integers, characters and booleans may be inverted" ]
            #end

            @ invert the resolved value and return it
            #not            [ #last ]
            #return         [ #last ]

            @ internal function
            #else           [ #data #present ] [ #scope:self ] [ #data function ]
            #pass           [ #scope:self:parameters ] [ #scope:checking ]
            #call           [ #function:indent:collect ] [ #last ]
            #call           [ #function:indent:function ] [ #scope:self:function ] [ #last ] [ #scope:self:#position:function ]
            #return         [ #last ]

            @ entries that resolve themselves
            #else
            #pass           [ #scope:self:passed ] [ #scope:checking ]
            #return         [ #last ]
            #end
        ]

        top [ [ #single self ]

            @ if debug is enabled, print the current pass
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:print_pass ] [ #data "indent" ]
            #end

            @ if present, pass the sections
            #if             [ #data #present ] [ #scope:self ] [ #data sections ]
            #pass           [ #scope:self:sections ] [ #data [ ] ]
            #modify         [ #data #scope:self:sections ] [ #last ]
            #end
            #return         [ #scope:self ]
        ]
    }
}
