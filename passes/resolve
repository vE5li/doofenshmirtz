#function {

    @ move this somewhere else
    convert_value [ [ #single value ]

        @ integer
        #if             [ #data #integer ] [ #scope:value ]
        #return         [ #scope:value ]

        @ float
        #else           [ #data #float ] [ #scope:value ]
        #error          [ #data "implement floats" ]
        @#return         [ #scope:value ]

        @ character
        #else           [ #data #character ] [ #scope:value ]
        #integer        [ #scope:value ]
        #return         [ #last ]

        @ true
        #else           [ #data #true ] [ #scope:value ]
        #return         [ #data -1 ]

        @ false
        #else           [ #data #false ] [ #scope:value ]
        #return         [ #data 0 ]

        @ invalid
        #else
        #type           [ #scope:value ]
        #error          [ #last ] [ #data " may not be moved into a register" ]
        #end
    ]

    resolve {

        label [ [ #single self ]

            @ set the active label and return unchanged self
            #if             [ #data #present ] [ #scope:self ] [ #data name ]
            #modify         [ #data #build:active_label ] [ #scope:self:name ]
            #end
            #return         [ #scope:self ]
        ]

        allocate_operant [ [ #single operants ] [ #single instance ] [ #single position ]

            @ make sure that operants are accessable
            #if             [ #data #zero ] [ #build:counter:operant ]
            #print_line     [ #root:#color:red ] [ #data "\ninvalid immediate" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #data "immediates can not be moved since the core does not have any operant registers" ]
            #end

            @ if the instance is already part of the operants
            #if             [ #data #contains ] [ #scope:operants ] [ #scope:instance ]
            #position       [ #scope:operants ] [ #scope:instance ]
            #subtract       [ #last:1 ] [ #data 1 ]
            #identifier     [ #data slot ] [ #last ]
            #path           [ #data operant ] [ #last ]
            #map            [ #data register ] [ #last ] [ #data operants ] [ #scope:operants ]
            #return         [ #last ]

            @ if the instance is not part of the operants, make sure that there are slots left
            #else
            #if             [ #data #not_smaller ] [ #scope:operants ] [ #build:counter:operant ]
            #print_line     [ #root:#color:red ] [ #data "\noperant regsiter overlow" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #data "only " ] [ #build:counter:operant ] [ #data " different immediates may be moved per instruction" ]
            #end

            @ create path to register
            #length         [ #scope:operants ]
            #identifier     [ #data slot ] [ #last ]
            #path           [ #data operant ] [ #last ]
            #set            [ #data register ] [ #last ]

            @ insert the instance into the operants list
            #append         [ #scope:operants ] [ #scope:instance ]
            #map            [ #data register ] [ #scope:register ] [ #data operants ] [ #last ]
            #return         [ #last ]
            #end
        ]

        source [ [ #single self ] [ #single operants ]

            @ register
            #if             [ #data #present ] [ #scope:self ] [ #data register ]
            #pass           [ #scope:self:register ]
            #map            [ #data register ] [ #last ] [ #data operants ] [ #scope:operants ]
            #return         [ #last ]

            @ label, make sure it exists
            #else           [ #data #present ] [ #scope:self ] [ #data name ]
            #if             [ #data #not_present ] [ #build:labels ] [ #scope:self:name ]
            #print_line     [ #root:#color:red ] [ #data "\nunknown label " ] [ #scope:self:name ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:name ]
            #print_line
            #error          [ #data "label " ] [ #scope:self:name ] [ #data " is not defined" ]
            #end

            @ make sure that the label is mapped
            #index          [ #build:labels ] [ #scope:self:name ]
            #if             [ #data #equals ] [ #last ] [ #data unmapped ]
            #print_line     [ #root:#color:red ] [ #data "\nunmapped label " ] [ #scope:self:name ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:name ]
            #print_line
            #error          [ #data "only labels inside sections that are mapped have a value" ]
            #end

            @ allocate an operant register and return it
            #call           [ #function:resolve:allocate_operant ] [ #scope:operants ] [ #last:value ] [ #scope:self:#position:name ]
            #return         [ #last ]

            @ sublabel, make sure it exists
            #else           [ #data #present ] [ #scope:self ] [ #data sublabel ]
            #index          [ #build:labels ] [ #build:active_label ]
            #if             [ #data #not_present ] [ #last:sublabels ] [ #scope:self:sublabel ]
            #print_line     [ #root:#color:red ] [ #data "\nunknown sublabel " ] [ #scope:self:sublabel ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:sublabel ]
            #print_line
            #error          [ #data "sublabel " ] [ #scope:self:sublabel ] [ #data " is not defined" ]
            #end

            @ allocate an operant register and return it
            #index          [ #last:sublabels ] [ #scope:self:sublabel ]
            #call           [ #function:resolve:allocate_operant ] [ #scope:operants ] [ #last ] [ #scope:self:#position:sublabel ]
            #return         [ #last ]

            @ immediate, allocate an operant register and return it
            #else
            #call           [ #function:convert_value ] [ #scope:self:value ]
            #call           [ #function:resolve:allocate_operant ] [ #scope:operants ] [ #last ] [ #scope:self:#position:value ]
            #return         [ #last ]
            #end
        ]

        register [ [ #single self ]

            @ make sure register group exists
            #if             [ #data #not_present ] [ #build:module_lookup ] [ #scope:self:steps:1:part ]
            #print_line     [ #root:#color:red ] [ #data "\nunknown register group " ] [ #scope:self:steps:1:part ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:steps:1:position:part ]
            #print_line
            #error          [ #data "register group " ] [ #scope:self:sublabel ] [ #data " is not part of the core" ]
            #end

            @ get the register entry from the lookup
            #index          [ #build:module_lookup ] [ #scope:self:steps:1:part ]
            #set            [ #data group ] [ #last ]

            @ make sure register exists
            #if             [ #data #not_present ] [ #scope:group ] [ #scope:self:steps:2:part ]
            #print_line     [ #root:#color:red ] [ #data "\ninvalid register " ] [ #scope:self:steps:2:part ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:steps:2:position:part ]
            #print_line
            #error          [ #data "register " ] [ #scope:self:sublabel ] [ #data " is not part of " ] [ #scope:self:steps:1:part ]
            #end

            @ create a path to the register and return it
            #path           [ #scope:self:steps:1:part ] [ #scope:self:steps:2:part ]
            #return         [ #last ]
        ]

        move [ [ #single self ] [ #single operants ]

            @ pass the source register
            #pass           [ #scope:self:source ] [ #scope:operants ]
            #set            [ #data source ] [ #last ]

            @ pass the destination register
            #pass           [ #scope:self:register ]
            #set            [ #data register ] [ #last ]

            @ get register path and register entry
            #path           [ #data #build:module_lookup ] [ #scope:register ]
            #set            [ #data register_path ] [ #last ]
            #resolve        [ #scope:register_path ]
            #set            [ #data register_entry ] [ #last ]

            @ make sure that register is writable
            #if             [ #data #not_present ] [ #scope:register_entry ] [ #data sources ]
            #print_line     [ #root:#color:red ] [ #data "\ninvalid destination " ] [ #scope:register ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:self:#position:register ]
            #print_line
            #error          [ #data "register may only be read from" ]
            #end

            @ if the source is not aleady listed, add it to the register entry
            #if             [ #data #not_contains ] [ #scope:register_entry:sources ] [ #scope:source:register ]
            #append         [ #scope:register_entry:sources ] [ #scope:source:register ]
            #overwrite      [ #scope:register_entry ] [ #data sources ] [ #last ]
            #modify         [ #scope:register_path ] [ #last ]
            #end

            @ return possibly modified operants
            #return         [ #scope:source:operants ]
        ]

        instruction [ [ #single self ]

            @ pass all moves and keep track of the used operant registers
            #if             [ #data #present ] [ #scope:self ] [ #data moves ]
            #set            [ #data operants ] [ #data [ ] ]
            #iterate        [ #scope:self:moves ]
            #pass           [ #last:instance:part ] [ #scope:operants ]
            #set            [ #data operants ] [ #last ]
            #end
            #end

            @ return unchanged self
            #return         [ #scope:self ]
        ]

        section [ [ #single section ]

            @ if section is not mapped, return without passing
            #if             [ #data #not_present ] [ #scope:section ] [ #data base ]
            #return         [ #scope:section ]
            #end

            @ set active label to none
            #overwrite      [ #build ] [ #data active_label ] [ #data none ]
            #modify         [ #data #build ] [ #last ]

            @ if present, pass all blocks
            #if             [ #data #present ] [ #scope:section ] [ #data blocks ]
            #pass           [ #scope:section:blocks ]
            #end
        ]

        code_section [ [ #single self ]
            #call           [ #function:resolve:section ] [ #scope:self ]
            #return         [ #scope:self ]
        ]

        memory_section [ [ #single self ]
            #if             [ #data #not_zero ] [ #build:counter:memory ]
            #call           [ #function:resolve:section ] [ #scope:self ]
            #end
            #return         [ #scope:self ]
        ]

        move_default [ [ #single top ] [ #single default_pool ]

            @ iterate all #default sections and get their path and entry
            #iterate        [ #scope:default_pool ]
            #path           [ #data #scope:top:sections ] [ #last:instance ] [ #data part:data ]
            #set            [ #data section_path ] [ #last ]
            #resolve        [ #scope:section_path ]
            #set            [ #data section_entry ] [ #last ]

            @ move the #default sections
            #insert         [ #scope:section_entry ] [ #data base ] [ #scope:top:size ]
            #modify         [ #scope:section_path ] [ #last ]
            #add            [ #scope:top:size ] [ #scope:section_entry:size ]
            #modify         [ #data #scope:top:size ] [ #last ]
            #end

            @ return modified top
            #return         [ #scope:top ]
        ]

        move_section [ [ #single top ] [ #single type ] [ #single pool ] [ #single name ] [ #single position ]

            @ get section path and entry
            #index          [ #scope:pool ] [ #scope:name ]
            #path           [ #data #scope:top:sections ] [ #last:index ] [ #data part:data ]
            #set            [ #data path ] [ #last ]
            #resolve        [ #scope:path ]
            #set            [ #data section_entry ] [ #last ]

            @ make sure that the section has not been mapped before
            #if             [ #data #present ] [ #scope:section_entry ] [ #data mapped ]
            #print_line     [ #root:#color:red ] [ #data "\nprevious relocation of " ] [ #scope:name ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:section_entry:mapped ]
            #print_line     [ #root:#color:red ] [ #data "\nrelocated again here" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line
            #error          [ #scope:type ] [ #data " sections may only be mapped once" ]
            #end

            @ move the section
            #insert         [ #scope:section_entry ] [ #data mapped ] [ #scope:position ]
            #insert         [ #last ] [ #data base ] [ #scope:top:size ]
            #modify         [ #scope:path ] [ #last ]
            #add            [ #scope:top:size ] [ #scope:section_entry:size ]
            #modify         [ #data #scope:top:size ] [ #last ]

            @ return modified top
            #return         [ #scope:top ]
        ]

        remap [ [ #single top ] [ #single type ]

            @ get the respective sections
            #identifier     [ #scope:type ] [ #data _sections ]
            #index          [ #build ] [ #last ]
            #set            [ #data pool ] [ #last ]

            @ set size to 0 initially
            #insert         [ #scope:top ] [ #data size ] [ #data 0 ]
            #set            [ #data top ] [ #last ]

            @ if custom map is present, iterate over the chunks
            #identifier     [ #scope:type ] [ #data _map ]
            #if             [ #data #present ] [ #build ] [ #last ]
            #index          [ #build ] [ #last ]
            #iterate        [ #last:chunks ]
            #iterate        [ #last:instance ]
            #set            [ #data iterator ] [ #last:instance ]

            @ if chunk is #default
            #if             [ #data #present ] [ #scope:iterator ] [ #data default ]

            @ make sure #default has not been mapped before
            #if             [ #data #present ] [ #scope ] [ #data default_mapped ]
            #print_line     [ #root:#color:red ] [ #data "\nprevious relocation of default " ] [ #scope:type ] [ #data " sections" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:default_mapped ]
            #print_line     [ #root:#color:red ] [ #data "\nrelocated again here" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:iterator:position ]
            #print_line
            #error          [ #data "default " ] [ #scope:type ] [ #data " section may only be mapped once" ]
            #end

            @ save position for errors and move the #default sections
            #set            [ #data default_mapped ] [ #scope:iterator:position ]
            #call           [ #function:resolve:move_default ] [ #scope:top ] [ #scope:pool:#default ]
            #set            [ #data top ] [ #last ]

            @ if chunk is not #default, make sure it exists
            #else           [ #data #present ] [ #scope:iterator ] [ #data identifier ]
            #if             [ #data #not_present ] [ #scope:pool ] [ #scope:iterator:identifier ]
            #print_line     [ #root:#color:red ] [ #data "\nunknown " ] [ #scope:type ] [ #data " section " ]  [ #scope:iterator:identifier ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:iterator:position ]
            #print_line
            #error          [ #scope:type ] [ #data " section " ] [ #scope:iterator:identifier ] [ #data " is not defined" ]
            #end

            @ move the named section
            #call           [ #function:resolve:move_section ] [ #scope:top ] [ #scope:type ] [ #scope:pool ] [ #scope:iterator:identifier ] [ #scope:iterator:position ]
            #set            [ #data top ] [ #last ]

            @ if chunk is the base
            #else           [ #data #present ] [ #scope:iterator ] [ #data base ]
            #if             [ #data #smaller ] [ #scope:iterator:base ] [ #scope:top:size ]
            #print_line     [ #root:#color:red ] [ #data "\noverlap at address " ] [ #scope:iterator:base ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:iterator:position ]
            #print_line
            #error          [ #scope:type ] [ #data " sections may not overlap" ]
            #end
            #modify         [ #data #scope:top:size ] [ #scope:iterator:base ]

            @ if chunk is an offset
            #else           [ #data #present ] [ #scope:iterator ] [ #data offset ]
            #add            [ #scope:top:size ] [ #scope:iterator:offset ]
            #modify         [ #data #scope:top:size ] [ #last ]
            #end
            #end
            #end

            @ if no custom map present
            #else
            #iterate        [ #scope:pool ]

            @ #default section
            #if             [ #data #keyword ] [ #last:selector ]
            #call           [ #function:resolve:move_default ] [ #scope:top ] [ #scope:pool:#default ]
            #set            [ #data top ] [ #last ]

            @ named section
            #else
            #call           [ #function:resolve:move_section ] [ #scope:top ] [ #scope:type ] [ #scope:pool ] [ #last:selector ] [ #data none ]
            #set            [ #data top ] [ #last ]
            #end
            #end
            #end

            @ move the size field to a typed field
            #identifier     [ #scope:type ] [ #data _size ]
            #move           [ #scope:top ] [ #data size ] [ #last ]
            #return         [ #last ]
        ]

        increment [ [ #single key ]
            #index          [ #build:counter ] [ #scope:key ]
            #add            [ #last ] [ #data 1 ]
            #set            [ #data value ] [ #last ]
            #overwrite      [ #build:counter ] [ #scope:key ] [ #scope:value ]
            #modify         [ #data #build:counter ] [ #last ]
            #return         [ #scope:value ]
        ]

        module_entry [ [ #single module ] [ #single count ] [ #single position ]

            @ get description entry
            #index          [ #root:module_description ] [ #scope:module ]
            #set            [ #data description ] [ #last ]

            @ if module is a driver
            #for            [ #data 1 ] [ #scope:count ]
            #if             [ #data #present ] [ #scope:description ] [ #data drives ]
            #iterate        [ #scope:description:drives ]
            #set            [ #data resource ] [ #last:instance ]

            @ make sure that there are no other modules driving the inputs
            #if             [ #data #present ] [ #build:driven ] [ #scope:resource ]
            #index          [ #build:driven ] [ #scope:resource ]
            #set            [ #data previous ] [ #last ]

            @ if the previous driver is a different module
            #print_line     [ #root:#color:red ] [ #data "\nprevious driver of " ] [ #scope:resource ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:previous:position ]
            #print_line     [ #root:#color:red ] [ #data "\nsecond driver here" ] [ #root:#color:none ]
            #call           [ #function:#position:print ] [ #root:#color:red ] [ #scope:position ]
            #print_line

            @ if the previous driver is the same module
            #if             [ #data #equals ] [ #scope:previous:module ] [ #scope:module ]
            #error          [ #scope:module ] [ #data " module may only be in the core once since it's driving " ] [ #scope:resource ]
            #else
            #error          [ #scope:module ] [ #data " module may not drive " ] [ #scope:resource ] [ #data " as it's already driven by the " ] [ #scope:previous:module ] [ #data " module" ]
            #end
            #end

            @ save the current module and position in case another module wants to drive it
            #map            [ #data module ] [ #scope:module ] [ #data position ] [ #scope:position ]
            #insert         [ #build:driven ] [ #scope:resource ] [ #last ]
            #modify         [ #data #build:driven ] [ #last ]
            #end

            @ set index to just the module name
            #set            [ #data counter ] [ #data 0 ]
            #set            [ #data index ] [ #scope:module ]

            @ if module is not a driver, set index to the module name plus the module number
            #else
            #index          [ #build:counter:module ] [ #scope:module ]
            #add            [ #last ] [ #data 1 ]
            #set            [ #data counter ] [ #last ]
            #subtract       [ #scope:counter ] [ #data 1 ]
            #identifier     [ #scope:module ] [ #last ]
            #set            [ #data index ] [ #last ]

            @ increment the module counter
            #overwrite      [ #build:counter:module ] [ #scope:module ] [ #scope:counter ]
            #modify         [ #data #build:counter:module ] [ #last ]
            #end

            @ create emtpy lookup entry
            #set            [ #data entry ] [ #data { } ]
            #length         [ #scope:description:registers ]
            #set            [ #data size ] [ #last ]

            @ iterate over all entries
            #for            [ #data 0 ] [ #scope:size ]
            #if             [ #data #equals ] [ #last ] [ #scope:size ]
            #insert         [ #build:module_lookup ] [ #scope:index ] [ #scope:entry ]
            #modify         [ #data #build:module_lookup ] [ #last ]

            @ add entry to resolved modules
            #map            [ #data module ] [ #scope:module ] [ #data lookup ] [ #scope:index ]
            #append         [ #build:resolved_modules ] [ #last ]
            #modify         [ #data #build:resolved_modules ] [ #last ]

            @ get the register name
            #else
            #set            [ #data selector ] [ #last ]
            #add            [ #scope:selector ] [ #data 1 ]
            #index          [ #scope:description:registers ] [ #last ]

            @ if the register is a full register
            #if             [ #data #keyword ] [ #last ]
            #identifier     [ #last ]
            #set            [ #data register ] [ #last ]
            #call           [ #function:resolve:increment ] [ #data full_register ]
            #set            [ #data input ] [ #last ]
            #call           [ #function:resolve:increment ] [ #data register ]
            #map            [ #data output ] [ #last ] [ #data input ] [ #scope:input ] [ #data sources ] [ #data [ ] ]

            @ if the register is not a full register
            #else
            #set            [ #data register ] [ #last ]
            #call           [ #function:resolve:increment ] [ #data register ]
            #map            [ #data output ] [ #last ]
            #end

            @ add register entry to module lookup
            #insert         [ #scope:entry ] [ #scope:register ] [ #last ]
            #set            [ #data entry ] [ #last ]
            #end
            #end
            #end
        ]

        register_entry [ [ #single type ] [ #single count ] [ #single full ]

            @ create slot identifier
            #for            [ #data 1 ] [ #scope:count ]
            #index          [ #build:counter ] [ #scope:type ]
            #identifier     [ #data slot ] [ #last ]
            #set            [ #data index ] [ #last ]

            @ increment register count and set bus output slot
            #call           [ #function:resolve:increment ] [ #data register ]
            #set            [ #data output ] [ #last ]

            @ if its a full register
            #if             [ #data #true ] [ #scope:full ]
            #call           [ #function:resolve:increment ] [ #data full_register ]
            #set            [ #data input ] [ #last ]
            #map            [ #data output ] [ #scope:output ] [ #data input ] [ #scope:input ] [ #data sources ] [ #data [ ] ]

            @ if its not a full register
            #else
            #map            [ #data output ] [ #scope:output ]
            #end
            #set            [ #data entry ] [ #last ]

            @ add register entry to module lookup
            #path           [ #data #build:module_lookup ] [ #scope:type ]
            #set            [ #data path ] [ #last ]
            #resolve        [ #scope:path ]
            #insert         [ #last ] [ #scope:index ] [ #scope:entry ]
            #modify         [ #scope:path ] [ #last ]

            @ add register to resolved modules
            #map            [ #data register ] [ #scope:type ] [ #data slot ] [ #scope:index ]
            #append         [ #build:resolved_modules ] [ #last ]
            #modify         [ #data #build:resolved_modules ] [ #last ]

            @ increment the register counter of that type
            #call           [ #function:resolve:increment ] [ #scope:type ]
            #end
        ]

        top [ [ #single self ]

            @ if debug is enabled, print the current pass
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:print_pass ] [ #data "resolve" ]
            #end

            @ create register counters and necessary maps
            #insert         [ #build ] [ #data counter ] [ #data { module { } register 0 full_register 0 } ]
            #insert         [ #last ] [ #data driven ] [ #data { } ]
            #insert         [ #last ] [ #data module_lookup ] [ #data { } ]
            #insert         [ #last ] [ #data resolved_modules ] [ #data [ ] ]
            #modify         [ #data #build ] [ #last ]

            @ add counters and lookup entries for all register types
            #iterate        [ #root:valid_registers ]
            #set            [ #data register_type ] [ #last:instance ]
            #insert         [ #build:counter ] [ #scope:register_type ] [ #data 0 ]
            #modify         [ #data #build:counter ] [ #last ]
            #insert         [ #build:module_lookup ] [ #scope:register_type ] [ #data { } ]
            #modify         [ #data #build:module_lookup ] [ #last ]
            #end

            @ create module counters
            #iterate        [ #root:module_description ]
            #if             [ #data #not_present ] [ #build:counter:module ] [ #last:selector ]
            #insert         [ #build:counter:module ] [ #last:selector ] [ #data 0 ]
            #modify         [ #data #build:counter:module ] [ #last ]
            #end
            #end

            @ debug message
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:#print:debug ] [ #data "creating module lookup" ]
            #end

            @ iterate modules to be created
            #iterate        [ #build:modules ]

            @ memory, operant or data register
            #if             [ #data #present ] [ #last:instance ] [ #data register ]
            #if             [ #data #equals ] [ #last:instance:register ] [ #data memory ]
            #call           [ #function:resolve:register_entry ] [ #data memory ] [ #last:instance:count ] [ #data !true ]
            #else           [ #data #equals ] [ #last:instance:register ] [ #data operant ]
            #call           [ #function:resolve:register_entry ] [ #data operant ] [ #last:instance:count ] [ #data !false ]
            #else           [ #data #equals ] [ #last:instance:register ] [ #data data ]
            #call           [ #function:resolve:register_entry ] [ #data data ] [ #last:instance:count ] [ #data !true ]
            #end

            @ module
            #else
            #call           [ #function:resolve:module_entry ] [ #last:instance:module ] [ #last:instance:count ] [ #last:instance:position ]
            #end
            #end

            @ debug message
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:#print:debug ] [ #data "relocating code and memory sections" ]
            #end

            @ remap the code and memory sections (if there are any)
            #if             [ #data #present ] [ #scope:self ] [ #data sections ]
            #call           [ #function:resolve:remap ] [ #scope:self ] [ #data code ]
            #call           [ #function:resolve:remap ] [ #last ] [ #data memory ]
            #modify         [ #data #scope:self ] [ #last ]

            @ debug message
            #if             [ #data #true ] [ #root:debug ]
            #call           [ #function:#print:debug ] [ #data "relocating labels and sublabels" ]
            #end

            @ relocate labels and sublabels
            #iterate        [ #build:labels ]
            #set            [ #data iterator ] [ #last ]
            #index          [ #scope:self:sections ] [ #scope:iterator:instance:section ]
            #set            [ #data section ] [ #last:part:data ]

            @ if section is mapped, relocate the sublabels
            #if             [ #data #present ] [ #scope:section ] [ #data base ]
            #iterate        [ #scope:iterator:instance:sublabels ]
            #set            [ #data sublabel ] [ #last ]
            #add            [ #scope:section:base ] [ #scope:sublabel:instance:offset ]
            #overwrite      [ #scope:iterator:instance:sublabels ] [ #scope:sublabel:selector ] [ #last ]
            #modify         [ #data #scope:iterator:instance:sublabels ] [ #last ]
            #end

            @ relocate the label
            #add            [ #scope:section:base ] [ #scope:iterator:instance:offset ]
            #map            [ #data value ] [ #last ] [ #data sublabels ] [ #scope:iterator:instance:sublabels ]
            #overwrite      [ #build:labels ] [ #scope:iterator:selector ] [ #last ]
            #modify         [ #data #build:labels ] [ #last ]

            @ if section is not mapped
            #else
            #overwrite      [ #build:labels ] [ #scope:iterator:selector ] [ #data unmapped ]
            #modify         [ #data #build:labels ] [ #last ]
            #end
            #end

            @ display warning if the core has no code
            #if             [ #data #zero ] [ #scope:self:code_size ]
            #call           [ #function:#print:warning ] [ #data "no executable code specified, core might not do anything" ]
            #end

            @ display a warning if we have something in memory but dont have memory registers
            #if             [ #data #zero ] [ #build:counter:memory ]
            #if             [ #data #not_zero ] [ #scope:self:memory_size ]
            #call           [ #function:#print:warning ] [ #data "program has data in memory but no memory registers to access it" ]
            #end
            #end

            @ process sections
            #pass           [ #scope:self:sections ]
            #end
            #return         [ #scope:self ]
        ]
    }
}
