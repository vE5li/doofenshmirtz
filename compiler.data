core            [ tokenizer parser builder ]

dependencies    [ format file color debug position ]

pipeline        [ define indent register resolve reduce generate ]

project {
    name            "doofenshmirtz"
    author          "ve5li"
    contact         "ve5li@tuta.io"
}

directory {
    apio            "/usr/share/kami/doofenshmirtz/apio/"
    core            "/usr/share/kami/doofenshmirtz/core/"
    pass            "/usr/share/kami/doofenshmirtz/passes/"
    module          "/usr/share/kami/doofenshmirtz/module/"
    utility         "/usr/share/kami/shego/library/"
}

#function {

    process_arguments [ [ #single arguments ]

        @ create configuration and index
        #modify         [ #data #scope:configuration ] [ #data { help $false files [ ] debug $false verilog $false output "output.uni" } ]
        #length         [ #scope:arguments ]
        #modify         [ #data #scope:count ] [ #last ]
        #modify         [ #data #scope:index ] [ #data 1 ]

        @ iterate over all arguments and match
        #while          [ #data #not_bigger ] [ #scope:index ] [ #scope:count ]
        #index          [ #scope:arguments ] [ #scope:index ]

        @ set output file
        #if             [ #data #equals ] [ #last ] [ #data "-o" ]
        #ensure         [ #data #bigger ] [ #scope:count ] [ #scope:index ] [ #data "expected output file" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data output_set ] [ #data "output file may only be spceified once" ]
        #modify         [ #data #scope:output_set ] [ #data $true ]
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]
        #index          [ #scope:arguments ] [ #scope:index ]
        #modify         [ #data #scope:configuration:output ] [ #last ]

        @ show help menu
        #else           [ #data #equals ] [ #last ] [ #data "-h" ]
        #modify         [ #data #scope:configuration:help ] [ #data $true ]

        @ enable debug
        #else           [ #data #equals ] [ #last ] [ #data "-d" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data debug_set ] [ #data "debug flag may only be set once" ]
        #modify         [ #data #scope:debug_set ] [ #data $true ]
        #modify         [ #data #scope:configuration:debug ] [ #data $true ]

        @ verilog mode
        #else           [ #data #equals ] [ #last ] [ #data "-verilog" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data verilog_set ] [ #data "verilog flag may only be set once" ]
        #modify         [ #data #scope:verilog_set ] [ #data $true ]
        #modify         [ #data #scope:configuration:verilog ] [ #data $true ]

        @ add source file
        #else
        #modify         [ #data #scope:file ] [ #last ]
        #if             [ #data #equals ] [ #scope:file:1 ] [ #data '-' ]
        #print_line     [ #data "invalid flag " ] [ #scope:file ]
        #modify         [ #data #scope:configuration:help ] [ #data $true ]
        #return         [ #scope:configuration ]
        #end
        #ensure         [ #data #not_contains ] [ #scope:configuration:files ] [ #scope:file ] [ #data "file " ] [ #scope:file ] [ #data " may only be passed to the compiler once" ]
        #append         [ #scope:configuration:files ] [ #scope:file ]
        #modify         [ #data #scope:configuration:files ] [ #last ]
        #end

        @ increment argument index
        #add            [ #scope:index ] [ #data 1 ]
        #modify         [ #data #scope:index ] [ #last ]
        #end

        @ if the compiler uses the verilog backend and no output is specified, change the output directory
        #if             [ #data #true ] [ #scope:configuration:verilog ]
        #if             [ #data #not_present ] [ #scope ] [ #data output_set ]
        #modify         [ #data #scope:configuration:output ] [ #data "verilog/" ]
        #else           [ #data #not_equals ] [ #scope:configuration:output:-1 ] [ #data '/' ]
        #append         [ #scope:configuration:output ] [ #data '/' ]
        #modify         [ #data #scope:configuration:output ] [ #last ]
        #end

        @ update module directory for verilog
        #insert         [ #root:directory:module ] [ #data -2 ] [ #data "_verilog" ]
        #modify         [ #data #root:directory:module ] [ #last ]
        #modify         [ #data #root:pipeline:-1 ] [ #data generate_verilog ]
        #end

        @ return configuration
        #return         [ #scope:configuration ]
    ]

    show_help [
        #print_line
        #print_line     [ #data "usage:" ]
        #print_line     [ #data "  $         doofenshmirtz <source files> [options]" ]
        #print_line
        #print_line     [ #data "options:" ]
        #print_line     [ #data " -h         show help menu" ]
        #print_line     [ #data " -o         set output file" ]
        #print_line     [ #data " -d         enable debug mode" ]
        #print_line     [ #data " -verilog   enable verilog backend" ]
        #print_line
        #print_line     [ #data "contact:" ]
        #print_line     [ #data "  #         github.com/ve5li/doofenshmirtz" ]
        #print_line     [ #data "  @         ve5li@tuta.io" ]
        #print_line
    ]

    #main [ [ #list arguments ]

        @ take initial time passed
        #time
        #modify         [ #data #scope:start_time ] [ #last ]

        @ process command line arguments
        #call           [ #function:process_arguments ] [ #scope:arguments ]
        #modify         [ #data #scope:configuration ] [ #last ]

        @ if help menu should be displayed
        #if             [ #data #true ] [ #scope:configuration:help ]
        #call           [ #function:show_help ]
        #return
        #end

        @ verilog user prompt
        #modify         [ #data #scope:testbench ] [ #data $false ]
        #if             [ #data #true ] [ #scope:configuration:verilog ]
        #input          [ #data "[ option ] create a verilog testbench? [y/N] " ]
        #if             [ #data #equals ] [ #last ] [ #data "y" ]
        #modify         [ #data #scope:testbench ] [ #data $true ]
        #end
        #end

        @ load the compiler core
        #map            [ #data debug ] [ #scope:configuration:debug ] [ #data testbench ] [ #scope:testbench ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #iterate        [ #root:core ]
        #string         [ #root:directory:core ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end

        @ load necessary libraries
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:utility ] [ #last:instance ] [ #data ".data" ]
        #read_map       [ #last ]
        #modify         [ #data #scope:library ] [ #last ]
        #merge          [ #root ] [ #scope:library ]
        #modify         [ #data #root ] [ #last ]
        #merge          [ #scope:compiler ] [ #scope:library ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end

        @ ensure that there are files to be compiled
        #ensure         [ #data #not_empty ] [ #scope:configuration:files ] [ #data "no files for compilation provided" ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "libraries loaded" ]
        #end

        @ tokenize and parse all source files and combine them
        #modify         [ #data #scope:top ] [ #data { } ]
        #iterate        [ #scope:configuration:files ]
        #modify         [ #data #scope:file ] [ #last:instance ]

        @ ensure that the source file exists
        #if             [ #data #not_file_present ] [ #scope:file ]
        #error          [ #data "missing source file " ] [ #scope:file ]
        #end

        @ read the source file, tokenize and parse it
        #read_file      [ #scope:file ]
        #tokenize       [ #scope:compiler ] [ #last ] [ #scope:file ] [ #data $false ]
        #parse          [ #scope:compiler ] [ #last:token_stream ] [ #last:registry ]
        #merge          [ #scope:top ] [ #last ]
        #modify         [ #data #scope:top ] [ #last ]
        #end

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "loading the pipeline" ]
        #end

        @ load the pipeline and the passes that are going to be used
        #insert         [ #scope:compiler ] [ #data #pipeline ] [ #root:pipeline ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #iterate        [ #root:pipeline ]
        #modify         [ #data #scope:pass ] [ #last:instance ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#format:tag ] [ #root:#color:magenta ] [ #data "pass" ]
        #call           [ #function:#print:debug ] [ #last ] [ #data " loading " ] [ #scope:pass ]
        #end

        @ load pass from file
        #string         [ #root:directory:pass ] [ #scope:pass ] [ #data ".data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #modify         [ #data #scope:compiler ] [ #last ]
        #end

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "loading the module list" ]
        #end

        @ load the module descriptions and build the parsed files
        #string         [ #root:directory:module ] [ #data "description.data" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #insert         [ #last ] [ #data module_directory ] [ #root:directory:module ]
        #modify         [ #data #scope:compiler ] [ #last ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "building top" ]
        #end

        @ compile parsed files
        #build          [ #scope:compiler ] [ #scope:top ]
        #modify         [ #data #scope:build ] [ #last ]

        @ if verilog mode
        #if             [ #data #true ] [ #scope:configuration:verilog ]
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "creating standard apio directory" ]
        #end

        @ copy apio directory to output path
        #system         [ #data "cp" ] [ #data "-r" ] [ #data "-T" ] [ #root:directory:apio ] [ #scope:configuration:output ]
        #if             [ #data #false ] [ #last ]
        #error          [ #data "failed to create directory " ] [ #scope:configuration:output ]
        #end

        @ write verilog code to file
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "writing code to file " ] [ #root:#color:magenta ] [ #scope:configuration:output ] [ #data "/top.v" ] [ #root:#color:none ]
        #end

        @ if testbench
        #if             [ #data #true ] [ #scope:testbench ]
        #string         [ #scope:configuration:output ] [ #data "/top_tb.v" ]
        #write_file     [ #last ] [ #scope:build:code ]
        #string         [ #scope:configuration:output ] [ #data "/dummy.v" ]
        #write_file     [ #last ] [ #data "" ]

        @ if not testbench
        #else
        #string         [ #scope:configuration:output ] [ #data "/top.v" ]
        #write_file     [ #last ] [ #scope:build:code ]
        #end

        @ if not verilog mode
        #else
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "writing code to file " ] [ #root:#color:magenta ] [ #scope:configuration:output ] [ #root:#color:none ]
        #end
        #write_file     [ #scope:configuration:output ] [ #scope:build:code ]
        #end

        @ print the compilation time
        #time
        #subtract       [ #last ] [ #scope:start_time ]
        #divide         [ #last ] [ #data 1000.0 ]
        #string         [ #last ]
        #slice          [ #last ] [ #data 1 ] [ #data 3 ]
        #call           [ #function:#print:success ] [ #data "completed in " ] [ #last ] [ #data "s"]
    ]
}
