core            [ tokenizer parser builder ]

dependencies    [ format file color debug position ]

pipeline        [ define indent register resolve reduce generate ]

project {
    name            "h0vs"
    author          "ve5li"
    contact         "ve5li@tuta.io"
}

directory {
    library         "/usr/share/seamonkey/qtc8/library/"
    core            "/usr/share/seamonkey/ktl9/core/"
    pass            "/usr/share/seamonkey/ktl9/passes/"
    module          "/usr/share/seamonkey/ktl9/module/"
}

#function {

    process_arguments [ [ #single arguments ]

        @ create configuration and index
        #set            [ #data configuration ] [ #data { files [ ] debug !false output "output.uni" } ]
        #length         [ #scope:arguments ]
        #set            [ #data count ] [ #last ]
        #set            [ #data index ] [ #data 1 ]

        @ iterate over all arguments and match
        #while          [ #data #not_bigger ] [ #scope:index ] [ #scope:count ]
        #index          [ #scope:arguments ] [ #scope:index ]

        @ set output file
        #if             [ #data #equals ] [ #last ] [ #data "-o" ]
        #ensure         [ #data #bigger ] [ #scope:count ] [ #scope:index ] [ #data "expected output file" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data output_set ] [ #data "output file may only be spceified once" ]
        #set            [ #data output_set ] [ #data !true ]
        #add            [ #scope:index ] [ #data 1 ]
        #set            [ #data index ] [ #last ]
        #index          [ #scope:arguments ] [ #scope:index ]
        #modify         [ #data #scope:configuration:output ] [ #last ]

        @ enable debug
        #else           [ #data #equals ] [ #last ] [ #data "-d" ]
        #ensure         [ #data #not_present ] [ #scope ] [ #data debug_set ] [ #data "debug flag may only be set once" ]
        #set            [ #data debug_set ] [ #data !true ]
        #modify         [ #data #scope:configuration:debug ] [ #data !true ]

        @ add source file
        #else
        #set            [ #data file ] [ #last ]
        #index          [ #scope:file ] [ #data 1 ]
        #ensure         [ #data #not_equals ] [ #last ] [ #data '-' ] [ #data "invalid flag " ] [ #scope:file ]
        #ensure         [ #data #not_contains ] [ #scope:configuration:files ] [ #scope:file ] [ #data "file " ] [ #scope:file ] [ #data " may only be passed to the compiler once" ]
        #append         [ #scope:configuration:files ] [ #scope:file ]
        #modify         [ #data #scope:configuration:files ] [ #last ]
        #end

        @ increment argument index
        #add            [ #scope:index ] [ #data 1 ]
        #set            [ #data index ] [ #last ]

        @ return configuration
        #end
        #return         [ #scope:configuration ]
    ]

    #main [ [ #list arguments ]

        @ take initial time passed
        #time
        #set            [ #data start_time ] [ #last ]

        @ process command line arguments
        #call           [ #function:process_arguments ] [ #scope:arguments ]
        #set            [ #data configuration ] [ #last ]

        @ load the compiler core
        #map            [ #data debug ] [ #scope:configuration:debug ]
        #set            [ #data compiler ] [ #last ]
        #iterate        [ #root:core ]
        #string         [ #root:directory:core ] [ #last:instance ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #set            [ #data compiler ] [ #last ]
        #end

        @ load necessary libraries
        #iterate        [ #root:dependencies ]
        #string         [ #root:directory:library ] [ #last:instance ]
        #read_map       [ #last ]
        #set            [ #data library ] [ #last ]
        #merge          [ #root ] [ #scope:library ]
        #modify         [ #data #root ] [ #last ]
        #merge          [ #scope:compiler ] [ #scope:library ]
        #set            [ #data compiler ] [ #last ]
        #end

        @ ensure that there are files to be compiled
        #ensure         [ #data #not_empty ] [ #scope:configuration:files ] [ #data "no files for compilation provided" ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "libraries loaded" ]
        #end

        @ tokenize and parse all source files and combine them
        #set            [ #data top ] [ #data { } ]
        #iterate        [ #scope:configuration:files ]
        #compile_file   [ #scope:compiler ] [ #last:instance ]
        #merge          [ #scope:top ] [ #last ]
        #set            [ #data top ] [ #last ]
        #end

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "loading the pipeline" ]
        #end

        @ load the pipeline and the passes that are going to be used
        #insert         [ #scope:compiler ] [ #data #pipeline ] [ #root:pipeline ]
        #set            [ #data compiler ] [ #last ]
        #iterate        [ #root:pipeline ]
        #set            [ #data pass ] [ #last:instance ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#format:tag ] [ #root:#color:magenta ] [ #data "pass" ]
        #call           [ #function:#print:debug ] [ #last ] [ #data " loading " ] [ #scope:pass ]
        #end

        @ load pass from file
        #string         [ #root:directory:pass ] [ #scope:pass ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #set            [ #data compiler ] [ #last ]
        #end

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "loading the module list" ]
        #end

        @ load the module descriptions and build the parsed files
        #string         [ #root:directory:module ] [ #data "description" ]
        #read_map       [ #last ]
        #merge          [ #scope:compiler ] [ #last ]
        #insert         [ #last ] [ #data module_directory ] [ #root:directory:module ]
        #set            [ #data compiler ] [ #last ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "building top" ]
        #end

        @ compile parsed files
        #build          [ #scope:compiler ] [ #scope:top ]
        #set            [ #data build ] [ #last ]

        @ debug message
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#print:debug ] [ #data "writing code to file " ] [ #root:#color:magenta ] [ #scope:configuration:output ] [ #root:#color:none ]
        #end
        #write_file     [ #scope:configuration:output ] [ #scope:build:code ]

        @ calculate the compilation time
        #time
        #subtract       [ #last ] [ #scope:start_time ]
        #divide         [ #last ] [ #data 1000.0 ]
        #set            [ #data duration ] [ #last ]

        @ output debug information if the user input is yes
        #if             [ #data #true ] [ #scope:configuration:debug ]
        #call           [ #function:#format:tag ] [ #root:#color:magenta ] [ #data "debug" ]
        #print          [ #last ] [ #data " print build map? (y, N) " ]
        #input
        #if             [ #data #equals ] [ #last ] [ #data "y" ]
        #call           [ #function:output_debug ] [ #scope:build ]
        #end
        #end

        @ print the compilation time
        #string         [ #scope:duration ]
        #slice          [ #last ] [ #data 1 ] [ #data 3 ]
        #call           [ #function:#print:success ] [ #data "completed in " ] [ #last ] [ #data "s"]
    ]

    output_debug [ [ #single build ]

        @ final sections that will be placed in memory
        #call           [ #function:#format:serialize ] [ #scope:build:bytecode ]
        #print_line     [ #root:#color:magenta ] [ #data "build:bytecode " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:operants ]
        #print_line     [ #root:#color:magenta ] [ #data "build:operants " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:memory ]
        #print_line     [ #root:#color:magenta ] [ #data "build:memory " ] [ #root:#color:none ] [ #last ]

        @ core modules in the same order that they are in the core
        #call           [ #function:#format:serialize ] [ #scope:build:modules ]
        #print_line     [ #root:#color:magenta ] [ #data "build:modules " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:resolved_modules ]
        #print_line     [ #root:#color:magenta ] [ #data "build:resolved_modules " ] [ #root:#color:none ] [ #last ]

        @ module lookup table and drivers
        #call           [ #function:#format:serialize ] [ #scope:build:module_lookup ]
        #print_line     [ #root:#color:magenta ] [ #data "build:module_lookup " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:driven ]
        #print_line     [ #root:#color:magenta ] [ #data "build:driven " ] [ #root:#color:none ] [ #last ]

        @ module counters and micro instruction widths
        #call           [ #function:#format:serialize ] [ #scope:build:counter ]
        #print_line     [ #root:#color:magenta ] [ #data "build:counter " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:micro_instruction_width ]
        #print_line     [ #root:#color:magenta ] [ #data "build:micro_instruction_width " ] [ #root:#color:none ] [ #last ]

        @ directives
        #call           [ #function:#format:level ] [ #scope:build:directives ] [ #data 80 ]
        #print_line     [ #root:#color:magenta ] [ #data "build:directives " ] [ #root:#color:none ] [ #last ]

        @ memory map (if present)
        #if             [ #data #present ] [ #scope:build ] [ #data memory_map ]
        #call           [ #function:#format:serialize ] [ #scope:build:memory_map ]
        #print_line     [ #root:#color:magenta ] [ #data "build:memory_map " ] [ #root:#color:none ] [ #last ]
        #end

        @ code map (if present)
        #if             [ #data #present ] [ #scope:build ] [ #data code_map ]
        #call           [ #function:#format:serialize ] [ #scope:build:code_map ]
        #print_line     [ #root:#color:magenta ] [ #data "build:code_map " ] [ #root:#color:none ] [ #last ]
        #end

        @ sections and section labels
        #call           [ #function:#format:serialize ] [ #scope:build:code_sections ]
        #print_line     [ #root:#color:magenta ] [ #data "build:code_sections " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:memory_sections ]
        #print_line     [ #root:#color:magenta ] [ #data "build:memory_sections " ] [ #root:#color:none ] [ #last ]
        #call           [ #function:#format:serialize ] [ #scope:build:labels ]
        #print_line     [ #root:#color:magenta ] [ #data "build:labels " ] [ #root:#color:none ] [ #last ]

        @ entire compiler
        #call           [ #function:#format:level ] [ #scope:build ] [ #data 80 ]
        #print_line     [ #root:#color:magenta ] [ #data "build " ] [ #root:#color:none ] [ #last ]
    ]
}
